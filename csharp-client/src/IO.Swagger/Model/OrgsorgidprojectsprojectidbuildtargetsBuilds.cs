/* 
 * Unity Cloud Build
 *
 * This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on 'Cloud Build Preferences' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// buildattempt
    /// </summary>
    [DataContract]
    public partial class OrgsorgidprojectsprojectidbuildtargetsBuilds :  IEquatable<OrgsorgidprojectsprojectidbuildtargetsBuilds>, IValidatableObject
    {
        /// <summary>
        /// Defines BuildStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BuildStatusEnum
        {
            
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,
            
            /// <summary>
            /// Enum SentToBuilder for value: sentToBuilder
            /// </summary>
            [EnumMember(Value = "sentToBuilder")]
            SentToBuilder = 2,
            
            /// <summary>
            /// Enum Started for value: started
            /// </summary>
            [EnumMember(Value = "started")]
            Started = 3,
            
            /// <summary>
            /// Enum Restarted for value: restarted
            /// </summary>
            [EnumMember(Value = "restarted")]
            Restarted = 4,
            
            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")]
            Success = 5,
            
            /// <summary>
            /// Enum Failure for value: failure
            /// </summary>
            [EnumMember(Value = "failure")]
            Failure = 6,
            
            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 7,
            
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 8
        }

        /// <summary>
        /// Gets or Sets BuildStatus
        /// </summary>
        [DataMember(Name="buildStatus", EmitDefaultValue=false)]
        public BuildStatusEnum? BuildStatus { get; set; }
        /// <summary>
        /// Defines CanceledBy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CanceledByEnum
        {
            
            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 1,
            
            /// <summary>
            /// Enum Service for value: service
            /// </summary>
            [EnumMember(Value = "service")]
            Service = 2,
            
            /// <summary>
            /// Enum ServiceTimelimit for value: service-timelimit
            /// </summary>
            [EnumMember(Value = "service-timelimit")]
            ServiceTimelimit = 3
        }

        /// <summary>
        /// Gets or Sets CanceledBy
        /// </summary>
        [DataMember(Name="canceledBy", EmitDefaultValue=false)]
        public CanceledByEnum? CanceledBy { get; set; }
        /// <summary>
        /// Defines Platform
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformEnum
        {
            
            /// <summary>
            /// Enum Ios for value: ios
            /// </summary>
            [EnumMember(Value = "ios")]
            Ios = 1,
            
            /// <summary>
            /// Enum Android for value: android
            /// </summary>
            [EnumMember(Value = "android")]
            Android = 2,
            
            /// <summary>
            /// Enum Webplayer for value: webplayer
            /// </summary>
            [EnumMember(Value = "webplayer")]
            Webplayer = 3,
            
            /// <summary>
            /// Enum Webgl for value: webgl
            /// </summary>
            [EnumMember(Value = "webgl")]
            Webgl = 4,
            
            /// <summary>
            /// Enum Standaloneosxintel for value: standaloneosxintel
            /// </summary>
            [EnumMember(Value = "standaloneosxintel")]
            Standaloneosxintel = 5,
            
            /// <summary>
            /// Enum Standaloneosxintel64 for value: standaloneosxintel64
            /// </summary>
            [EnumMember(Value = "standaloneosxintel64")]
            Standaloneosxintel64 = 6,
            
            /// <summary>
            /// Enum Standaloneosxuniversal for value: standaloneosxuniversal
            /// </summary>
            [EnumMember(Value = "standaloneosxuniversal")]
            Standaloneosxuniversal = 7,
            
            /// <summary>
            /// Enum Standalonewindows for value: standalonewindows
            /// </summary>
            [EnumMember(Value = "standalonewindows")]
            Standalonewindows = 8,
            
            /// <summary>
            /// Enum Standalonewindows64 for value: standalonewindows64
            /// </summary>
            [EnumMember(Value = "standalonewindows64")]
            Standalonewindows64 = 9,
            
            /// <summary>
            /// Enum Standalonelinux for value: standalonelinux
            /// </summary>
            [EnumMember(Value = "standalonelinux")]
            Standalonelinux = 10,
            
            /// <summary>
            /// Enum Standalonelinux64 for value: standalonelinux64
            /// </summary>
            [EnumMember(Value = "standalonelinux64")]
            Standalonelinux64 = 11,
            
            /// <summary>
            /// Enum Standalonelinuxuniversal for value: standalonelinuxuniversal
            /// </summary>
            [EnumMember(Value = "standalonelinuxuniversal")]
            Standalonelinuxuniversal = 12
        }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public PlatformEnum? Platform { get; set; }
        /// <summary>
        /// reason the build is currently waiting
        /// </summary>
        /// <value>reason the build is currently waiting</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueuedReasonEnum
        {
            
            /// <summary>
            /// Enum TargetConcurrency for value: targetConcurrency
            /// </summary>
            [EnumMember(Value = "targetConcurrency")]
            TargetConcurrency = 1,
            
            /// <summary>
            /// Enum Cooldown for value: cooldown
            /// </summary>
            [EnumMember(Value = "cooldown")]
            Cooldown = 2,
            
            /// <summary>
            /// Enum BuildConcurrency for value: buildConcurrency
            /// </summary>
            [EnumMember(Value = "buildConcurrency")]
            BuildConcurrency = 3,
            
            /// <summary>
            /// Enum WaitingForBuildAgent for value: waitingForBuildAgent
            /// </summary>
            [EnumMember(Value = "waitingForBuildAgent")]
            WaitingForBuildAgent = 4,
            
            /// <summary>
            /// Enum Evaluating for value: evaluating
            /// </summary>
            [EnumMember(Value = "evaluating")]
            Evaluating = 5,
            
            /// <summary>
            /// Enum SentToBuilder for value: sentToBuilder
            /// </summary>
            [EnumMember(Value = "sentToBuilder")]
            SentToBuilder = 6
        }

        /// <summary>
        /// reason the build is currently waiting
        /// </summary>
        /// <value>reason the build is currently waiting</value>
        [DataMember(Name="queuedReason", EmitDefaultValue=false)]
        public QueuedReasonEnum? QueuedReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgsorgidprojectsprojectidbuildtargetsBuilds" /> class.
        /// </summary>
        /// <param name="build">build.</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name.</param>
        /// <param name="buildTargetName">buildTargetName.</param>
        /// <param name="buildGUID">unique GUID identifying this build.</param>
        /// <param name="buildStatus">buildStatus.</param>
        /// <param name="cleanBuild">if the build was built without using data cached from previous builds.</param>
        /// <param name="failureDetails">list of failure details for this build attempt, when available.</param>
        /// <param name="canceledBy">canceledBy.</param>
        /// <param name="platform">platform.</param>
        /// <param name="workspaceSize">size of workspace in bytes.</param>
        /// <param name="created">when the build was created.</param>
        /// <param name="finished">when the build completely finished.</param>
        /// <param name="checkoutStartTime">when the build starting checking out code.</param>
        /// <param name="checkoutTimeInSeconds">amount of time spent checking out code.</param>
        /// <param name="buildStartTime">when the build started compiling.</param>
        /// <param name="buildTimeInSeconds">amount of time spend compiling.</param>
        /// <param name="publishStartTime">when the build started saving build artifacts.</param>
        /// <param name="publishTimeInSeconds">amount of time spent saving build artifacts.</param>
        /// <param name="totalTimeInSeconds">total time for the build.</param>
        /// <param name="lastBuiltRevision">source control commit id for the build.</param>
        /// <param name="changeset">a list of source control changes between this and the last build.</param>
        /// <param name="favorited">if the build is marked as do not delete or not.</param>
        /// <param name="label">description given when a build is favorited.</param>
        /// <param name="deleted">if the build is deleted or not.</param>
        /// <param name="headless">if the build was built to run in linux headless mode.</param>
        /// <param name="credentialsOutdated">if a newer credential has been attached to this buildtarget and the build can be re-signed.</param>
        /// <param name="deletedBy">email address of the user who deleted this attempt.</param>
        /// <param name="queuedReason">reason the build is currently waiting.</param>
        /// <param name="cooldownDate">time until this build will be reconsidered for building.</param>
        /// <param name="scmBranch">scm branch to be built.</param>
        /// <param name="unityVersion">&#39;latest&#39; or a unity dot version with underscores (ex. &#39;4_6_5&#39;).</param>
        /// <param name="xcodeVersion">&#39;latest&#39; or a supported xcode version (ex. &#39;xcode7&#39;).</param>
        /// <param name="auditChanges">auditChanges.</param>
        /// <param name="projectVersion">projectVersion.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="orgId">orgId.</param>
        /// <param name="orgFk">orgFk.</param>
        /// <param name="filetoken">filetoken.</param>
        /// <param name="links">links.</param>
        /// <param name="buildReport">buildReport.</param>
        /// <param name="testResults">testResults.</param>
        /// <param name="error">error.</param>
        public OrgsorgidprojectsprojectidbuildtargetsBuilds(decimal? build = default(decimal?), string buildtargetid = default(string), string buildTargetName = default(string), string buildGUID = default(string), BuildStatusEnum? buildStatus = default(BuildStatusEnum?), bool? cleanBuild = default(bool?), List<OrgsorgidprojectsprojectidbuildtargetsFailureDetails> failureDetails = default(List<OrgsorgidprojectsprojectidbuildtargetsFailureDetails>), CanceledByEnum? canceledBy = default(CanceledByEnum?), PlatformEnum? platform = default(PlatformEnum?), decimal? workspaceSize = default(decimal?), string created = default(string), string finished = default(string), string checkoutStartTime = default(string), decimal? checkoutTimeInSeconds = default(decimal?), string buildStartTime = default(string), decimal? buildTimeInSeconds = default(decimal?), string publishStartTime = default(string), decimal? publishTimeInSeconds = default(decimal?), decimal? totalTimeInSeconds = default(decimal?), string lastBuiltRevision = default(string), List<Object> changeset = default(List<Object>), bool? favorited = default(bool?), string label = default(string), bool? deleted = default(bool?), Object headless = default(Object), bool? credentialsOutdated = default(bool?), string deletedBy = default(string), QueuedReasonEnum? queuedReason = default(QueuedReasonEnum?), string cooldownDate = default(string), string scmBranch = default(string), string unityVersion = default(string), string xcodeVersion = default(string), decimal? auditChanges = default(decimal?), OrgsorgidprojectsprojectidbuildtargetsProjectVersion projectVersion = default(OrgsorgidprojectsprojectidbuildtargetsProjectVersion), string projectName = default(string), string projectId = default(string), string orgId = default(string), string orgFk = default(string), string filetoken = default(string), Dictionary<string, OrgsorgidprojectsprojectidbuildtargetsLinks> links = default(Dictionary<string, OrgsorgidprojectsprojectidbuildtargetsLinks>), OrgsorgidprojectsprojectidbuildtargetsBuildReport buildReport = default(OrgsorgidprojectsprojectidbuildtargetsBuildReport), OrgsorgidprojectsprojectidbuildtargetsTestResults testResults = default(OrgsorgidprojectsprojectidbuildtargetsTestResults), string error = default(string))
        {
            this.Build = build;
            this.Buildtargetid = buildtargetid;
            this.BuildTargetName = buildTargetName;
            this.BuildGUID = buildGUID;
            this.BuildStatus = buildStatus;
            this.CleanBuild = cleanBuild;
            this.FailureDetails = failureDetails;
            this.CanceledBy = canceledBy;
            this.Platform = platform;
            this.WorkspaceSize = workspaceSize;
            this.Created = created;
            this.Finished = finished;
            this.CheckoutStartTime = checkoutStartTime;
            this.CheckoutTimeInSeconds = checkoutTimeInSeconds;
            this.BuildStartTime = buildStartTime;
            this.BuildTimeInSeconds = buildTimeInSeconds;
            this.PublishStartTime = publishStartTime;
            this.PublishTimeInSeconds = publishTimeInSeconds;
            this.TotalTimeInSeconds = totalTimeInSeconds;
            this.LastBuiltRevision = lastBuiltRevision;
            this.Changeset = changeset;
            this.Favorited = favorited;
            this.Label = label;
            this.Deleted = deleted;
            this.Headless = headless;
            this.CredentialsOutdated = credentialsOutdated;
            this.DeletedBy = deletedBy;
            this.QueuedReason = queuedReason;
            this.CooldownDate = cooldownDate;
            this.ScmBranch = scmBranch;
            this.UnityVersion = unityVersion;
            this.XcodeVersion = xcodeVersion;
            this.AuditChanges = auditChanges;
            this.ProjectVersion = projectVersion;
            this.ProjectName = projectName;
            this.ProjectId = projectId;
            this.OrgId = orgId;
            this.OrgFk = orgFk;
            this.Filetoken = filetoken;
            this.Links = links;
            this.BuildReport = buildReport;
            this.TestResults = testResults;
            this.Error = error;
        }
        
        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public decimal? Build { get; set; }

        /// <summary>
        /// unique id auto-generated from the build target name
        /// </summary>
        /// <value>unique id auto-generated from the build target name</value>
        [DataMember(Name="buildtargetid", EmitDefaultValue=false)]
        public string Buildtargetid { get; set; }

        /// <summary>
        /// Gets or Sets BuildTargetName
        /// </summary>
        [DataMember(Name="buildTargetName", EmitDefaultValue=false)]
        public string BuildTargetName { get; set; }

        /// <summary>
        /// unique GUID identifying this build
        /// </summary>
        /// <value>unique GUID identifying this build</value>
        [DataMember(Name="buildGUID", EmitDefaultValue=false)]
        public string BuildGUID { get; set; }


        /// <summary>
        /// if the build was built without using data cached from previous builds
        /// </summary>
        /// <value>if the build was built without using data cached from previous builds</value>
        [DataMember(Name="cleanBuild", EmitDefaultValue=false)]
        public bool? CleanBuild { get; set; }

        /// <summary>
        /// list of failure details for this build attempt, when available
        /// </summary>
        /// <value>list of failure details for this build attempt, when available</value>
        [DataMember(Name="failureDetails", EmitDefaultValue=false)]
        public List<OrgsorgidprojectsprojectidbuildtargetsFailureDetails> FailureDetails { get; set; }



        /// <summary>
        /// size of workspace in bytes
        /// </summary>
        /// <value>size of workspace in bytes</value>
        [DataMember(Name="workspaceSize", EmitDefaultValue=false)]
        public decimal? WorkspaceSize { get; set; }

        /// <summary>
        /// when the build was created
        /// </summary>
        /// <value>when the build was created</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// when the build completely finished
        /// </summary>
        /// <value>when the build completely finished</value>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public string Finished { get; set; }

        /// <summary>
        /// when the build starting checking out code
        /// </summary>
        /// <value>when the build starting checking out code</value>
        [DataMember(Name="checkoutStartTime", EmitDefaultValue=false)]
        public string CheckoutStartTime { get; set; }

        /// <summary>
        /// amount of time spent checking out code
        /// </summary>
        /// <value>amount of time spent checking out code</value>
        [DataMember(Name="checkoutTimeInSeconds", EmitDefaultValue=false)]
        public decimal? CheckoutTimeInSeconds { get; set; }

        /// <summary>
        /// when the build started compiling
        /// </summary>
        /// <value>when the build started compiling</value>
        [DataMember(Name="buildStartTime", EmitDefaultValue=false)]
        public string BuildStartTime { get; set; }

        /// <summary>
        /// amount of time spend compiling
        /// </summary>
        /// <value>amount of time spend compiling</value>
        [DataMember(Name="buildTimeInSeconds", EmitDefaultValue=false)]
        public decimal? BuildTimeInSeconds { get; set; }

        /// <summary>
        /// when the build started saving build artifacts
        /// </summary>
        /// <value>when the build started saving build artifacts</value>
        [DataMember(Name="publishStartTime", EmitDefaultValue=false)]
        public string PublishStartTime { get; set; }

        /// <summary>
        /// amount of time spent saving build artifacts
        /// </summary>
        /// <value>amount of time spent saving build artifacts</value>
        [DataMember(Name="publishTimeInSeconds", EmitDefaultValue=false)]
        public decimal? PublishTimeInSeconds { get; set; }

        /// <summary>
        /// total time for the build
        /// </summary>
        /// <value>total time for the build</value>
        [DataMember(Name="totalTimeInSeconds", EmitDefaultValue=false)]
        public decimal? TotalTimeInSeconds { get; set; }

        /// <summary>
        /// source control commit id for the build
        /// </summary>
        /// <value>source control commit id for the build</value>
        [DataMember(Name="lastBuiltRevision", EmitDefaultValue=false)]
        public string LastBuiltRevision { get; set; }

        /// <summary>
        /// a list of source control changes between this and the last build
        /// </summary>
        /// <value>a list of source control changes between this and the last build</value>
        [DataMember(Name="changeset", EmitDefaultValue=false)]
        public List<Object> Changeset { get; set; }

        /// <summary>
        /// if the build is marked as do not delete or not
        /// </summary>
        /// <value>if the build is marked as do not delete or not</value>
        [DataMember(Name="favorited", EmitDefaultValue=false)]
        public bool? Favorited { get; set; }

        /// <summary>
        /// description given when a build is favorited
        /// </summary>
        /// <value>description given when a build is favorited</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// if the build is deleted or not
        /// </summary>
        /// <value>if the build is deleted or not</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// if the build was built to run in linux headless mode
        /// </summary>
        /// <value>if the build was built to run in linux headless mode</value>
        [DataMember(Name="headless", EmitDefaultValue=false)]
        public Object Headless { get; set; }

        /// <summary>
        /// if a newer credential has been attached to this buildtarget and the build can be re-signed
        /// </summary>
        /// <value>if a newer credential has been attached to this buildtarget and the build can be re-signed</value>
        [DataMember(Name="credentialsOutdated", EmitDefaultValue=false)]
        public bool? CredentialsOutdated { get; set; }

        /// <summary>
        /// email address of the user who deleted this attempt
        /// </summary>
        /// <value>email address of the user who deleted this attempt</value>
        [DataMember(Name="deletedBy", EmitDefaultValue=false)]
        public string DeletedBy { get; set; }


        /// <summary>
        /// time until this build will be reconsidered for building
        /// </summary>
        /// <value>time until this build will be reconsidered for building</value>
        [DataMember(Name="cooldownDate", EmitDefaultValue=false)]
        public string CooldownDate { get; set; }

        /// <summary>
        /// scm branch to be built
        /// </summary>
        /// <value>scm branch to be built</value>
        [DataMember(Name="scmBranch", EmitDefaultValue=false)]
        public string ScmBranch { get; set; }

        /// <summary>
        /// &#39;latest&#39; or a unity dot version with underscores (ex. &#39;4_6_5&#39;)
        /// </summary>
        /// <value>&#39;latest&#39; or a unity dot version with underscores (ex. &#39;4_6_5&#39;)</value>
        [DataMember(Name="unityVersion", EmitDefaultValue=false)]
        public string UnityVersion { get; set; }

        /// <summary>
        /// &#39;latest&#39; or a supported xcode version (ex. &#39;xcode7&#39;)
        /// </summary>
        /// <value>&#39;latest&#39; or a supported xcode version (ex. &#39;xcode7&#39;)</value>
        [DataMember(Name="xcodeVersion", EmitDefaultValue=false)]
        public string XcodeVersion { get; set; }

        /// <summary>
        /// Gets or Sets AuditChanges
        /// </summary>
        [DataMember(Name="auditChanges", EmitDefaultValue=false)]
        public decimal? AuditChanges { get; set; }

        /// <summary>
        /// Gets or Sets ProjectVersion
        /// </summary>
        [DataMember(Name="projectVersion", EmitDefaultValue=false)]
        public OrgsorgidprojectsprojectidbuildtargetsProjectVersion ProjectVersion { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="projectName", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name="orgId", EmitDefaultValue=false)]
        public string OrgId { get; set; }

        /// <summary>
        /// Gets or Sets OrgFk
        /// </summary>
        [DataMember(Name="orgFk", EmitDefaultValue=false)]
        public string OrgFk { get; set; }

        /// <summary>
        /// Gets or Sets Filetoken
        /// </summary>
        [DataMember(Name="filetoken", EmitDefaultValue=false)]
        public string Filetoken { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Dictionary<string, OrgsorgidprojectsprojectidbuildtargetsLinks> Links { get; set; }

        /// <summary>
        /// Gets or Sets BuildReport
        /// </summary>
        [DataMember(Name="buildReport", EmitDefaultValue=false)]
        public OrgsorgidprojectsprojectidbuildtargetsBuildReport BuildReport { get; set; }

        /// <summary>
        /// Gets or Sets TestResults
        /// </summary>
        [DataMember(Name="testResults", EmitDefaultValue=false)]
        public OrgsorgidprojectsprojectidbuildtargetsTestResults TestResults { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgsorgidprojectsprojectidbuildtargetsBuilds {\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Buildtargetid: ").Append(Buildtargetid).Append("\n");
            sb.Append("  BuildTargetName: ").Append(BuildTargetName).Append("\n");
            sb.Append("  BuildGUID: ").Append(BuildGUID).Append("\n");
            sb.Append("  BuildStatus: ").Append(BuildStatus).Append("\n");
            sb.Append("  CleanBuild: ").Append(CleanBuild).Append("\n");
            sb.Append("  FailureDetails: ").Append(FailureDetails).Append("\n");
            sb.Append("  CanceledBy: ").Append(CanceledBy).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  WorkspaceSize: ").Append(WorkspaceSize).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  CheckoutStartTime: ").Append(CheckoutStartTime).Append("\n");
            sb.Append("  CheckoutTimeInSeconds: ").Append(CheckoutTimeInSeconds).Append("\n");
            sb.Append("  BuildStartTime: ").Append(BuildStartTime).Append("\n");
            sb.Append("  BuildTimeInSeconds: ").Append(BuildTimeInSeconds).Append("\n");
            sb.Append("  PublishStartTime: ").Append(PublishStartTime).Append("\n");
            sb.Append("  PublishTimeInSeconds: ").Append(PublishTimeInSeconds).Append("\n");
            sb.Append("  TotalTimeInSeconds: ").Append(TotalTimeInSeconds).Append("\n");
            sb.Append("  LastBuiltRevision: ").Append(LastBuiltRevision).Append("\n");
            sb.Append("  Changeset: ").Append(Changeset).Append("\n");
            sb.Append("  Favorited: ").Append(Favorited).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Headless: ").Append(Headless).Append("\n");
            sb.Append("  CredentialsOutdated: ").Append(CredentialsOutdated).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  QueuedReason: ").Append(QueuedReason).Append("\n");
            sb.Append("  CooldownDate: ").Append(CooldownDate).Append("\n");
            sb.Append("  ScmBranch: ").Append(ScmBranch).Append("\n");
            sb.Append("  UnityVersion: ").Append(UnityVersion).Append("\n");
            sb.Append("  XcodeVersion: ").Append(XcodeVersion).Append("\n");
            sb.Append("  AuditChanges: ").Append(AuditChanges).Append("\n");
            sb.Append("  ProjectVersion: ").Append(ProjectVersion).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  OrgFk: ").Append(OrgFk).Append("\n");
            sb.Append("  Filetoken: ").Append(Filetoken).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  BuildReport: ").Append(BuildReport).Append("\n");
            sb.Append("  TestResults: ").Append(TestResults).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgsorgidprojectsprojectidbuildtargetsBuilds);
        }

        /// <summary>
        /// Returns true if OrgsorgidprojectsprojectidbuildtargetsBuilds instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgsorgidprojectsprojectidbuildtargetsBuilds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgsorgidprojectsprojectidbuildtargetsBuilds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.Buildtargetid == input.Buildtargetid ||
                    (this.Buildtargetid != null &&
                    this.Buildtargetid.Equals(input.Buildtargetid))
                ) && 
                (
                    this.BuildTargetName == input.BuildTargetName ||
                    (this.BuildTargetName != null &&
                    this.BuildTargetName.Equals(input.BuildTargetName))
                ) && 
                (
                    this.BuildGUID == input.BuildGUID ||
                    (this.BuildGUID != null &&
                    this.BuildGUID.Equals(input.BuildGUID))
                ) && 
                (
                    this.BuildStatus == input.BuildStatus ||
                    (this.BuildStatus != null &&
                    this.BuildStatus.Equals(input.BuildStatus))
                ) && 
                (
                    this.CleanBuild == input.CleanBuild ||
                    (this.CleanBuild != null &&
                    this.CleanBuild.Equals(input.CleanBuild))
                ) && 
                (
                    this.FailureDetails == input.FailureDetails ||
                    this.FailureDetails != null &&
                    this.FailureDetails.SequenceEqual(input.FailureDetails)
                ) && 
                (
                    this.CanceledBy == input.CanceledBy ||
                    (this.CanceledBy != null &&
                    this.CanceledBy.Equals(input.CanceledBy))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.WorkspaceSize == input.WorkspaceSize ||
                    (this.WorkspaceSize != null &&
                    this.WorkspaceSize.Equals(input.WorkspaceSize))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.CheckoutStartTime == input.CheckoutStartTime ||
                    (this.CheckoutStartTime != null &&
                    this.CheckoutStartTime.Equals(input.CheckoutStartTime))
                ) && 
                (
                    this.CheckoutTimeInSeconds == input.CheckoutTimeInSeconds ||
                    (this.CheckoutTimeInSeconds != null &&
                    this.CheckoutTimeInSeconds.Equals(input.CheckoutTimeInSeconds))
                ) && 
                (
                    this.BuildStartTime == input.BuildStartTime ||
                    (this.BuildStartTime != null &&
                    this.BuildStartTime.Equals(input.BuildStartTime))
                ) && 
                (
                    this.BuildTimeInSeconds == input.BuildTimeInSeconds ||
                    (this.BuildTimeInSeconds != null &&
                    this.BuildTimeInSeconds.Equals(input.BuildTimeInSeconds))
                ) && 
                (
                    this.PublishStartTime == input.PublishStartTime ||
                    (this.PublishStartTime != null &&
                    this.PublishStartTime.Equals(input.PublishStartTime))
                ) && 
                (
                    this.PublishTimeInSeconds == input.PublishTimeInSeconds ||
                    (this.PublishTimeInSeconds != null &&
                    this.PublishTimeInSeconds.Equals(input.PublishTimeInSeconds))
                ) && 
                (
                    this.TotalTimeInSeconds == input.TotalTimeInSeconds ||
                    (this.TotalTimeInSeconds != null &&
                    this.TotalTimeInSeconds.Equals(input.TotalTimeInSeconds))
                ) && 
                (
                    this.LastBuiltRevision == input.LastBuiltRevision ||
                    (this.LastBuiltRevision != null &&
                    this.LastBuiltRevision.Equals(input.LastBuiltRevision))
                ) && 
                (
                    this.Changeset == input.Changeset ||
                    this.Changeset != null &&
                    this.Changeset.SequenceEqual(input.Changeset)
                ) && 
                (
                    this.Favorited == input.Favorited ||
                    (this.Favorited != null &&
                    this.Favorited.Equals(input.Favorited))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Headless == input.Headless ||
                    (this.Headless != null &&
                    this.Headless.Equals(input.Headless))
                ) && 
                (
                    this.CredentialsOutdated == input.CredentialsOutdated ||
                    (this.CredentialsOutdated != null &&
                    this.CredentialsOutdated.Equals(input.CredentialsOutdated))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.QueuedReason == input.QueuedReason ||
                    (this.QueuedReason != null &&
                    this.QueuedReason.Equals(input.QueuedReason))
                ) && 
                (
                    this.CooldownDate == input.CooldownDate ||
                    (this.CooldownDate != null &&
                    this.CooldownDate.Equals(input.CooldownDate))
                ) && 
                (
                    this.ScmBranch == input.ScmBranch ||
                    (this.ScmBranch != null &&
                    this.ScmBranch.Equals(input.ScmBranch))
                ) && 
                (
                    this.UnityVersion == input.UnityVersion ||
                    (this.UnityVersion != null &&
                    this.UnityVersion.Equals(input.UnityVersion))
                ) && 
                (
                    this.XcodeVersion == input.XcodeVersion ||
                    (this.XcodeVersion != null &&
                    this.XcodeVersion.Equals(input.XcodeVersion))
                ) && 
                (
                    this.AuditChanges == input.AuditChanges ||
                    (this.AuditChanges != null &&
                    this.AuditChanges.Equals(input.AuditChanges))
                ) && 
                (
                    this.ProjectVersion == input.ProjectVersion ||
                    (this.ProjectVersion != null &&
                    this.ProjectVersion.Equals(input.ProjectVersion))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.OrgFk == input.OrgFk ||
                    (this.OrgFk != null &&
                    this.OrgFk.Equals(input.OrgFk))
                ) && 
                (
                    this.Filetoken == input.Filetoken ||
                    (this.Filetoken != null &&
                    this.Filetoken.Equals(input.Filetoken))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.BuildReport == input.BuildReport ||
                    (this.BuildReport != null &&
                    this.BuildReport.Equals(input.BuildReport))
                ) && 
                (
                    this.TestResults == input.TestResults ||
                    (this.TestResults != null &&
                    this.TestResults.Equals(input.TestResults))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.Buildtargetid != null)
                    hashCode = hashCode * 59 + this.Buildtargetid.GetHashCode();
                if (this.BuildTargetName != null)
                    hashCode = hashCode * 59 + this.BuildTargetName.GetHashCode();
                if (this.BuildGUID != null)
                    hashCode = hashCode * 59 + this.BuildGUID.GetHashCode();
                if (this.BuildStatus != null)
                    hashCode = hashCode * 59 + this.BuildStatus.GetHashCode();
                if (this.CleanBuild != null)
                    hashCode = hashCode * 59 + this.CleanBuild.GetHashCode();
                if (this.FailureDetails != null)
                    hashCode = hashCode * 59 + this.FailureDetails.GetHashCode();
                if (this.CanceledBy != null)
                    hashCode = hashCode * 59 + this.CanceledBy.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.WorkspaceSize != null)
                    hashCode = hashCode * 59 + this.WorkspaceSize.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.CheckoutStartTime != null)
                    hashCode = hashCode * 59 + this.CheckoutStartTime.GetHashCode();
                if (this.CheckoutTimeInSeconds != null)
                    hashCode = hashCode * 59 + this.CheckoutTimeInSeconds.GetHashCode();
                if (this.BuildStartTime != null)
                    hashCode = hashCode * 59 + this.BuildStartTime.GetHashCode();
                if (this.BuildTimeInSeconds != null)
                    hashCode = hashCode * 59 + this.BuildTimeInSeconds.GetHashCode();
                if (this.PublishStartTime != null)
                    hashCode = hashCode * 59 + this.PublishStartTime.GetHashCode();
                if (this.PublishTimeInSeconds != null)
                    hashCode = hashCode * 59 + this.PublishTimeInSeconds.GetHashCode();
                if (this.TotalTimeInSeconds != null)
                    hashCode = hashCode * 59 + this.TotalTimeInSeconds.GetHashCode();
                if (this.LastBuiltRevision != null)
                    hashCode = hashCode * 59 + this.LastBuiltRevision.GetHashCode();
                if (this.Changeset != null)
                    hashCode = hashCode * 59 + this.Changeset.GetHashCode();
                if (this.Favorited != null)
                    hashCode = hashCode * 59 + this.Favorited.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.Headless != null)
                    hashCode = hashCode * 59 + this.Headless.GetHashCode();
                if (this.CredentialsOutdated != null)
                    hashCode = hashCode * 59 + this.CredentialsOutdated.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.QueuedReason != null)
                    hashCode = hashCode * 59 + this.QueuedReason.GetHashCode();
                if (this.CooldownDate != null)
                    hashCode = hashCode * 59 + this.CooldownDate.GetHashCode();
                if (this.ScmBranch != null)
                    hashCode = hashCode * 59 + this.ScmBranch.GetHashCode();
                if (this.UnityVersion != null)
                    hashCode = hashCode * 59 + this.UnityVersion.GetHashCode();
                if (this.XcodeVersion != null)
                    hashCode = hashCode * 59 + this.XcodeVersion.GetHashCode();
                if (this.AuditChanges != null)
                    hashCode = hashCode * 59 + this.AuditChanges.GetHashCode();
                if (this.ProjectVersion != null)
                    hashCode = hashCode * 59 + this.ProjectVersion.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.OrgId != null)
                    hashCode = hashCode * 59 + this.OrgId.GetHashCode();
                if (this.OrgFk != null)
                    hashCode = hashCode * 59 + this.OrgFk.GetHashCode();
                if (this.Filetoken != null)
                    hashCode = hashCode * 59 + this.Filetoken.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.BuildReport != null)
                    hashCode = hashCode * 59 + this.BuildReport.GetHashCode();
                if (this.TestResults != null)
                    hashCode = hashCode * 59 + this.TestResults.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BuildTargetName (string) maxLength
            if(this.BuildTargetName != null && this.BuildTargetName.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BuildTargetName, length must be less than 64.", new [] { "BuildTargetName" });
            }

            yield break;
        }
    }

}
