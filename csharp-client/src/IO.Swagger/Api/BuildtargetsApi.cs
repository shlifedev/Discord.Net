/* 
 * Unity Cloud Build
 *
 * This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on 'Cloud Build Preferences' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildtargetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create build target for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Object</returns>
        Object AddBuildTarget (string orgid, string projectid, Options6 options);

        /// <summary>
        /// Create build target for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddBuildTargetWithHttpInfo (string orgid, string projectid, Options6 options);
        /// <summary>
        /// Delete build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>string</returns>
        string DeleteBuildTarget (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Delete build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Get a build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Object</returns>
        Object GetBuildTarget (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Get a build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// List all build targets for a project
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetBuildTargets (string orgid, string projectid, string include = null, bool? includeLastSuccess = null);

        /// <summary>
        /// List all build targets for a project
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetBuildTargetsWithHttpInfo (string orgid, string projectid, string include = null, bool? includeLastSuccess = null);
        /// <summary>
        /// List all build targets for an org
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetBuildTargetsForOrg (string orgid, string include = null, bool? includeLastSuccess = null);

        /// <summary>
        /// List all build targets for an org
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetBuildTargetsForOrgWithHttpInfo (string orgid, string include = null, bool? includeLastSuccess = null);
        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetEnvVariablesForBuildTarget (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetEnvVariablesForBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Get build target statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for the specified build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>Object</returns>
        Object GetStats (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null);

        /// <summary>
        /// Get build target statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for the specified build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStatsWithHttpInfo (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null);
        /// <summary>
        /// Set environment variables
        /// </summary>
        /// <remarks>
        /// Set all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> SetEnvVariablesForBuildTarget (string orgid, string projectid, string buildtargetid, Object envvars);

        /// <summary>
        /// Set environment variables
        /// </summary>
        /// <remarks>
        /// Set all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> SetEnvVariablesForBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid, Object envvars);
        /// <summary>
        /// Update build target details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Object</returns>
        Object UpdateBuildTarget (string orgid, string projectid, string buildtargetid, Options7 options);

        /// <summary>
        /// Update build target details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid, Options7 options);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create build target for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddBuildTargetAsync (string orgid, string projectid, Options6 options);

        /// <summary>
        /// Create build target for a project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBuildTargetAsyncWithHttpInfo (string orgid, string projectid, Options6 options);
        /// <summary>
        /// Delete build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteBuildTargetAsync (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Delete build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Get a build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetBuildTargetAsync (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Get a build target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// List all build targets for a project
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetBuildTargetsAsync (string orgid, string projectid, string include = null, bool? includeLastSuccess = null);

        /// <summary>
        /// List all build targets for a project
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetBuildTargetsAsyncWithHttpInfo (string orgid, string projectid, string include = null, bool? includeLastSuccess = null);
        /// <summary>
        /// List all build targets for an org
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetBuildTargetsForOrgAsync (string orgid, string include = null, bool? includeLastSuccess = null);

        /// <summary>
        /// List all build targets for an org
        /// </summary>
        /// <remarks>
        /// Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetBuildTargetsForOrgAsyncWithHttpInfo (string orgid, string include = null, bool? includeLastSuccess = null);
        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetEnvVariablesForBuildTargetAsync (string orgid, string projectid, string buildtargetid);

        /// <summary>
        /// Get environment variables
        /// </summary>
        /// <remarks>
        /// Get all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetEnvVariablesForBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid);
        /// <summary>
        /// Get build target statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for the specified build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStatsAsync (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null);

        /// <summary>
        /// Get build target statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for the specified build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStatsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null);
        /// <summary>
        /// Set environment variables
        /// </summary>
        /// <remarks>
        /// Set all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> SetEnvVariablesForBuildTargetAsync (string orgid, string projectid, string buildtargetid, Object envvars);

        /// <summary>
        /// Set environment variables
        /// </summary>
        /// <remarks>
        /// Set all configured environment variables for a given build target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> SetEnvVariablesForBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, Object envvars);
        /// <summary>
        /// Update build target details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateBuildTargetAsync (string orgid, string projectid, string buildtargetid, Options7 options);

        /// <summary>
        /// Update build target details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, Options7 options);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildtargetsApi : IBuildtargetsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildtargetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildtargetsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildtargetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildtargetsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create build target for a project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Object</returns>
        public Object AddBuildTarget (string orgid, string projectid, Options6 options)
        {
             ApiResponse<Object> localVarResponse = AddBuildTargetWithHttpInfo(orgid, projectid, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create build target for a project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddBuildTargetWithHttpInfo (string orgid, string projectid, Options6 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->AddBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->AddBuildTarget");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildtargetsApi->AddBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create build target for a project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddBuildTargetAsync (string orgid, string projectid, Options6 options)
        {
             ApiResponse<Object> localVarResponse = await AddBuildTargetAsyncWithHttpInfo(orgid, projectid, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create build target for a project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBuildTargetAsyncWithHttpInfo (string orgid, string projectid, Options6 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->AddBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->AddBuildTarget");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildtargetsApi->AddBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>string</returns>
        public string DeleteBuildTarget (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<string> localVarResponse = DeleteBuildTargetWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->DeleteBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->DeleteBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->DeleteBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteBuildTargetAsync (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<string> localVarResponse = await DeleteBuildTargetAsyncWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->DeleteBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->DeleteBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->DeleteBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Object</returns>
        public Object GetBuildTarget (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<Object> localVarResponse = GetBuildTargetWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->GetBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetBuildTargetAsync (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<Object> localVarResponse = await GetBuildTargetAsyncWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a build target 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->GetBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List all build targets for a project Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetBuildTargets (string orgid, string projectid, string include = null, bool? includeLastSuccess = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetBuildTargetsWithHttpInfo(orgid, projectid, include, includeLastSuccess);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all build targets for a project Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetBuildTargetsWithHttpInfo (string orgid, string projectid, string include = null, bool? includeLastSuccess = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetBuildTargets");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetBuildTargets");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (includeLastSuccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_last_success", includeLastSuccess)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTargets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List all build targets for a project Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetBuildTargetsAsync (string orgid, string projectid, string include = null, bool? includeLastSuccess = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetBuildTargetsAsyncWithHttpInfo(orgid, projectid, include, includeLastSuccess);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all build targets for a project Gets all configured build targets for a project, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetBuildTargetsAsyncWithHttpInfo (string orgid, string projectid, string include = null, bool? includeLastSuccess = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetBuildTargets");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetBuildTargets");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (includeLastSuccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_last_success", includeLastSuccess)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTargets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List all build targets for an org Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetBuildTargetsForOrg (string orgid, string include = null, bool? includeLastSuccess = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetBuildTargetsForOrgWithHttpInfo(orgid, include, includeLastSuccess);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all build targets for an org Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetBuildTargetsForOrgWithHttpInfo (string orgid, string include = null, bool? includeLastSuccess = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetBuildTargetsForOrg");

            var localVarPath = "/orgs/{orgid}/buildtargets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (includeLastSuccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_last_success", includeLastSuccess)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTargetsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List all build targets for an org Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetBuildTargetsForOrgAsync (string orgid, string include = null, bool? includeLastSuccess = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetBuildTargetsForOrgAsyncWithHttpInfo(orgid, include, includeLastSuccess);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all build targets for an org Gets all configured build targets for an org, regardless of whether they are enabled. Add \&quot;?include&#x3D;settings,credentials\&quot; as a query parameter to include the build target settings and credentials with the response. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="include">Extra fields to include in the response (optional)</param>
        /// <param name="includeLastSuccess">Include last successful build (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetBuildTargetsForOrgAsyncWithHttpInfo (string orgid, string include = null, bool? includeLastSuccess = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetBuildTargetsForOrg");

            var localVarPath = "/orgs/{orgid}/buildtargets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (includeLastSuccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_last_success", includeLastSuccess)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTargetsForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get environment variables Get all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetEnvVariablesForBuildTarget (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = GetEnvVariablesForBuildTargetWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get environment variables Get all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > GetEnvVariablesForBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetEnvVariablesForBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetEnvVariablesForBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->GetEnvVariablesForBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/envvars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvVariablesForBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Get environment variables Get all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetEnvVariablesForBuildTargetAsync (string orgid, string projectid, string buildtargetid)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await GetEnvVariablesForBuildTargetAsyncWithHttpInfo(orgid, projectid, buildtargetid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get environment variables Get all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetEnvVariablesForBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetEnvVariablesForBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetEnvVariablesForBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->GetEnvVariablesForBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/envvars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvVariablesForBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Get build target statistics Get statistics for the specified build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>Object</returns>
        public Object GetStats (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null)
        {
             ApiResponse<Object> localVarResponse = GetStatsWithHttpInfo(orgid, projectid, buildtargetid, buildStatus, cleanBuild, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get build target statistics Get statistics for the specified build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetStatsWithHttpInfo (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetStats");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetStats");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->GetStats");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (buildStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "buildStatus", buildStatus)); // query parameter
            if (cleanBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cleanBuild", cleanBuild)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get build target statistics Get statistics for the specified build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStatsAsync (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null)
        {
             ApiResponse<Object> localVarResponse = await GetStatsAsyncWithHttpInfo(orgid, projectid, buildtargetid, buildStatus, cleanBuild, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get build target statistics Get statistics for the specified build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="buildStatus">Query for only builds of a specific status (optional)</param>
        /// <param name="cleanBuild">Query for builds that have either been built clean or using caches (optional)</param>
        /// <param name="limit">Get stats for last limit builds (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStatsAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, string buildStatus = null, bool? cleanBuild = null, decimal? limit = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->GetStats");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->GetStats");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->GetStats");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (buildStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "buildStatus", buildStatus)); // query parameter
            if (cleanBuild != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cleanBuild", cleanBuild)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Set environment variables Set all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> SetEnvVariablesForBuildTarget (string orgid, string projectid, string buildtargetid, Object envvars)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = SetEnvVariablesForBuildTargetWithHttpInfo(orgid, projectid, buildtargetid, envvars);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set environment variables Set all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > SetEnvVariablesForBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid, Object envvars)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");
            // verify the required parameter 'envvars' is set
            if (envvars == null)
                throw new ApiException(400, "Missing required parameter 'envvars' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/envvars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (envvars != null && envvars.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(envvars); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envvars; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetEnvVariablesForBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Set environment variables Set all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> SetEnvVariablesForBuildTargetAsync (string orgid, string projectid, string buildtargetid, Object envvars)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await SetEnvVariablesForBuildTargetAsyncWithHttpInfo(orgid, projectid, buildtargetid, envvars);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set environment variables Set all configured environment variables for a given build target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="envvars">Environment variables</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> SetEnvVariablesForBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, Object envvars)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");
            // verify the required parameter 'envvars' is set
            if (envvars == null)
                throw new ApiException(400, "Missing required parameter 'envvars' when calling BuildtargetsApi->SetEnvVariablesForBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}/envvars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (envvars != null && envvars.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(envvars); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envvars; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetEnvVariablesForBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Update build target details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Object</returns>
        public Object UpdateBuildTarget (string orgid, string projectid, string buildtargetid, Options7 options)
        {
             ApiResponse<Object> localVarResponse = UpdateBuildTargetWithHttpInfo(orgid, projectid, buildtargetid, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update build target details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateBuildTargetWithHttpInfo (string orgid, string projectid, string buildtargetid, Options7 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->UpdateBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->UpdateBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->UpdateBuildTarget");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildtargetsApi->UpdateBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update build target details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateBuildTargetAsync (string orgid, string projectid, string buildtargetid, Options7 options)
        {
             ApiResponse<Object> localVarResponse = await UpdateBuildTargetAsyncWithHttpInfo(orgid, projectid, buildtargetid, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update build target details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="buildtargetid">unique id auto-generated from the build target name</param>
        /// <param name="options">Options for build target create/update</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBuildTargetAsyncWithHttpInfo (string orgid, string projectid, string buildtargetid, Options7 options)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling BuildtargetsApi->UpdateBuildTarget");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling BuildtargetsApi->UpdateBuildTarget");
            // verify the required parameter 'buildtargetid' is set
            if (buildtargetid == null)
                throw new ApiException(400, "Missing required parameter 'buildtargetid' when calling BuildtargetsApi->UpdateBuildTarget");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling BuildtargetsApi->UpdateBuildTarget");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/buildtargets/{buildtargetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (buildtargetid != null) localVarPathParams.Add("buildtargetid", this.Configuration.ApiClient.ParameterToString(buildtargetid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBuildTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
