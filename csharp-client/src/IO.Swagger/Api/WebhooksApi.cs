/* 
 * Unity Cloud Build
 *
 * This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on 'Cloud Build Preferences' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add hook for organization
        /// </summary>
        /// <remarks>
        /// Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        Object AddHookForOrg (string orgid, Options2 options = null);

        /// <summary>
        /// Add hook for organization
        /// </summary>
        /// <remarks>
        /// Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddHookForOrgWithHttpInfo (string orgid, Options2 options = null);
        /// <summary>
        /// Add hook for project
        /// </summary>
        /// <remarks>
        /// Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        Object AddHookForProject (string orgid, string projectid, Options4 options = null);

        /// <summary>
        /// Add hook for project
        /// </summary>
        /// <remarks>
        /// Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddHookForProjectWithHttpInfo (string orgid, string projectid, Options4 options = null);
        /// <summary>
        /// Delete organization hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        string DeleteHook (string orgid, string id);

        /// <summary>
        /// Delete organization hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteHookWithHttpInfo (string orgid, string id);
        /// <summary>
        /// Delete project hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        string DeleteHook_0 (string orgid, string projectid, string id);

        /// <summary>
        /// Delete project hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteHook_0WithHttpInfo (string orgid, string projectid, string id);
        /// <summary>
        /// Get organization hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Object</returns>
        Object GetHook (string orgid, string id);

        /// <summary>
        /// Get organization hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetHookWithHttpInfo (string orgid, string id);
        /// <summary>
        /// Get project hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Object</returns>
        Object GetHook_0 (string orgid, string projectid, string id);

        /// <summary>
        /// Get project hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetHook_0WithHttpInfo (string orgid, string projectid, string id);
        /// <summary>
        /// List hooks for organization
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> ListHooksForOrg (string orgid);

        /// <summary>
        /// List hooks for organization
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> ListHooksForOrgWithHttpInfo (string orgid);
        /// <summary>
        /// List hooks for project
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified project
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> ListHooksForProject (string orgid, string projectid);

        /// <summary>
        /// List hooks for project
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified project
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> ListHooksForProjectWithHttpInfo (string orgid, string projectid);
        /// <summary>
        /// Ping an org hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to an org hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        string PingHook (string orgid, string id);

        /// <summary>
        /// Ping an org hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to an org hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PingHookWithHttpInfo (string orgid, string id);
        /// <summary>
        /// Ping a project hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to a project hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        string PingHook_0 (string orgid, string projectid, string id);

        /// <summary>
        /// Ping a project hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to a project hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PingHook_0WithHttpInfo (string orgid, string projectid, string id);
        /// <summary>
        /// Update hook for organization
        /// </summary>
        /// <remarks>
        /// Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateHook (string orgid, string id, Options3 options = null);

        /// <summary>
        /// Update hook for organization
        /// </summary>
        /// <remarks>
        /// Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateHookWithHttpInfo (string orgid, string id, Options3 options = null);
        /// <summary>
        /// Update hook for project
        /// </summary>
        /// <remarks>
        /// Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateHook_0 (string orgid, string projectid, string id, Options5 options = null);

        /// <summary>
        /// Update hook for project
        /// </summary>
        /// <remarks>
        /// Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateHook_0WithHttpInfo (string orgid, string projectid, string id, Options5 options = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add hook for organization
        /// </summary>
        /// <remarks>
        /// Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddHookForOrgAsync (string orgid, Options2 options = null);

        /// <summary>
        /// Add hook for organization
        /// </summary>
        /// <remarks>
        /// Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddHookForOrgAsyncWithHttpInfo (string orgid, Options2 options = null);
        /// <summary>
        /// Add hook for project
        /// </summary>
        /// <remarks>
        /// Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddHookForProjectAsync (string orgid, string projectid, Options4 options = null);

        /// <summary>
        /// Add hook for project
        /// </summary>
        /// <remarks>
        /// Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddHookForProjectAsyncWithHttpInfo (string orgid, string projectid, Options4 options = null);
        /// <summary>
        /// Delete organization hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteHookAsync (string orgid, string id);

        /// <summary>
        /// Delete organization hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteHookAsyncWithHttpInfo (string orgid, string id);
        /// <summary>
        /// Delete project hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteHook_0Async (string orgid, string projectid, string id);

        /// <summary>
        /// Delete project hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteHook_0AsyncWithHttpInfo (string orgid, string projectid, string id);
        /// <summary>
        /// Get organization hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetHookAsync (string orgid, string id);

        /// <summary>
        /// Get organization hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHookAsyncWithHttpInfo (string orgid, string id);
        /// <summary>
        /// Get project hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetHook_0Async (string orgid, string projectid, string id);

        /// <summary>
        /// Get project hook details
        /// </summary>
        /// <remarks>
        /// Get details of a hook by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHook_0AsyncWithHttpInfo (string orgid, string projectid, string id);
        /// <summary>
        /// List hooks for organization
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> ListHooksForOrgAsync (string orgid);

        /// <summary>
        /// List hooks for organization
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified organization
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListHooksForOrgAsyncWithHttpInfo (string orgid);
        /// <summary>
        /// List hooks for project
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified project
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> ListHooksForProjectAsync (string orgid, string projectid);

        /// <summary>
        /// List hooks for project
        /// </summary>
        /// <remarks>
        /// List all hooks configured for the specified project
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListHooksForProjectAsyncWithHttpInfo (string orgid, string projectid);
        /// <summary>
        /// Ping an org hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to an org hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PingHookAsync (string orgid, string id);

        /// <summary>
        /// Ping an org hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to an org hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PingHookAsyncWithHttpInfo (string orgid, string id);
        /// <summary>
        /// Ping a project hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to a project hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PingHook_0Async (string orgid, string projectid, string id);

        /// <summary>
        /// Ping a project hook
        /// </summary>
        /// <remarks>
        /// Send a ping event to a project hook. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PingHook_0AsyncWithHttpInfo (string orgid, string projectid, string id);
        /// <summary>
        /// Update hook for organization
        /// </summary>
        /// <remarks>
        /// Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateHookAsync (string orgid, string id, Options3 options = null);

        /// <summary>
        /// Update hook for organization
        /// </summary>
        /// <remarks>
        /// Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHookAsyncWithHttpInfo (string orgid, string id, Options3 options = null);
        /// <summary>
        /// Update hook for project
        /// </summary>
        /// <remarks>
        /// Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateHook_0Async (string orgid, string projectid, string id, Options5 options = null);

        /// <summary>
        /// Update hook for project
        /// </summary>
        /// <remarks>
        /// Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHook_0AsyncWithHttpInfo (string orgid, string projectid, string id, Options5 options = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add hook for organization Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        public Object AddHookForOrg (string orgid, Options2 options = null)
        {
             ApiResponse<Object> localVarResponse = AddHookForOrgWithHttpInfo(orgid, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add hook for organization Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddHookForOrgWithHttpInfo (string orgid, Options2 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->AddHookForOrg");

            var localVarPath = "/orgs/{orgid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHookForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add hook for organization Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddHookForOrgAsync (string orgid, Options2 options = null)
        {
             ApiResponse<Object> localVarResponse = await AddHookForOrgAsyncWithHttpInfo(orgid, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add hook for organization Adds a new organization level hook. An organization level hook is triggered by events from all projects belonging to the organziation. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddHookForOrgAsyncWithHttpInfo (string orgid, Options2 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->AddHookForOrg");

            var localVarPath = "/orgs/{orgid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHookForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add hook for project Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        public Object AddHookForProject (string orgid, string projectid, Options4 options = null)
        {
             ApiResponse<Object> localVarResponse = AddHookForProjectWithHttpInfo(orgid, projectid, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add hook for project Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddHookForProjectWithHttpInfo (string orgid, string projectid, Options4 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->AddHookForProject");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->AddHookForProject");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHookForProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add hook for project Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddHookForProjectAsync (string orgid, string projectid, Options4 options = null)
        {
             ApiResponse<Object> localVarResponse = await AddHookForProjectAsyncWithHttpInfo(orgid, projectid, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add hook for project Adds a new project level hook. A project level hook is only triggered by events from the specific project. NOTE: you must be a manager in the organization to add new hooks. &lt;h4&gt;Hook Type Configuration Parameters&lt;/h4&gt; &lt;div class&#x3D;\&quot;webhook-tag-desc\&quot;&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Configuration Options&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;web&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Endpoint to submit POST request&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;encoding&lt;/th&gt;&lt;td&gt;Either &lt;code&gt;json&lt;/code&gt; (default) or &lt;code&gt;form&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;sslVerify&lt;/th&gt;&lt;td&gt;Verify SSL certificates of HTTPS endpoint&lt;/td&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;th&gt;secret&lt;/th&gt;&lt;td&gt;Used to compute the SHA256 HMAC signature of the hook body and adds          a &lt;code&gt;X-UnityCloudBuild-Signature&lt;/code&gt; header to the payload&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;    &lt;td&gt;&lt;code&gt;slack&lt;/code&gt;    &lt;td&gt;       &lt;table&gt;          &lt;tr&gt;&lt;th&gt;url&lt;/th&gt;&lt;td&gt;Slack incoming webhook URL. Learn more at https://api.slack.com/incoming-webhooks&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;    &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddHookForProjectAsyncWithHttpInfo (string orgid, string projectid, Options4 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->AddHookForProject");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->AddHookForProject");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHookForProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete organization hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        public string DeleteHook (string orgid, string id)
        {
             ApiResponse<string> localVarResponse = DeleteHookWithHttpInfo(orgid, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete organization hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteHookWithHttpInfo (string orgid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->DeleteHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete organization hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteHookAsync (string orgid, string id)
        {
             ApiResponse<string> localVarResponse = await DeleteHookAsyncWithHttpInfo(orgid, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete organization hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteHookAsyncWithHttpInfo (string orgid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->DeleteHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete project hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        public string DeleteHook_0 (string orgid, string projectid, string id)
        {
             ApiResponse<string> localVarResponse = DeleteHook_0WithHttpInfo(orgid, projectid, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete project hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteHook_0WithHttpInfo (string orgid, string projectid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->DeleteHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->DeleteHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete project hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteHook_0Async (string orgid, string projectid, string id)
        {
             ApiResponse<string> localVarResponse = await DeleteHook_0AsyncWithHttpInfo(orgid, projectid, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete project hook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteHook_0AsyncWithHttpInfo (string orgid, string projectid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->DeleteHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->DeleteHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get organization hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Object</returns>
        public Object GetHook (string orgid, string id)
        {
             ApiResponse<Object> localVarResponse = GetHookWithHttpInfo(orgid, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get organization hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetHookWithHttpInfo (string orgid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->GetHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get organization hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetHookAsync (string orgid, string id)
        {
             ApiResponse<Object> localVarResponse = await GetHookAsyncWithHttpInfo(orgid, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get organization hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHookAsyncWithHttpInfo (string orgid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->GetHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get project hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Object</returns>
        public Object GetHook_0 (string orgid, string projectid, string id)
        {
             ApiResponse<Object> localVarResponse = GetHook_0WithHttpInfo(orgid, projectid, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetHook_0WithHttpInfo (string orgid, string projectid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->GetHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->GetHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get project hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetHook_0Async (string orgid, string projectid, string id)
        {
             ApiResponse<Object> localVarResponse = await GetHook_0AsyncWithHttpInfo(orgid, projectid, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project hook details Get details of a hook by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHook_0AsyncWithHttpInfo (string orgid, string projectid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->GetHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->GetHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List hooks for organization List all hooks configured for the specified organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> ListHooksForOrg (string orgid)
        {
             ApiResponse<List<Object>> localVarResponse = ListHooksForOrgWithHttpInfo(orgid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List hooks for organization List all hooks configured for the specified organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > ListHooksForOrgWithHttpInfo (string orgid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->ListHooksForOrg");

            var localVarPath = "/orgs/{orgid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListHooksForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List hooks for organization List all hooks configured for the specified organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> ListHooksForOrgAsync (string orgid)
        {
             ApiResponse<List<Object>> localVarResponse = await ListHooksForOrgAsyncWithHttpInfo(orgid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List hooks for organization List all hooks configured for the specified organization
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListHooksForOrgAsyncWithHttpInfo (string orgid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->ListHooksForOrg");

            var localVarPath = "/orgs/{orgid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListHooksForOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List hooks for project List all hooks configured for the specified project
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> ListHooksForProject (string orgid, string projectid)
        {
             ApiResponse<List<Object>> localVarResponse = ListHooksForProjectWithHttpInfo(orgid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List hooks for project List all hooks configured for the specified project
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > ListHooksForProjectWithHttpInfo (string orgid, string projectid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->ListHooksForProject");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->ListHooksForProject");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListHooksForProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List hooks for project List all hooks configured for the specified project
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> ListHooksForProjectAsync (string orgid, string projectid)
        {
             ApiResponse<List<Object>> localVarResponse = await ListHooksForProjectAsyncWithHttpInfo(orgid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List hooks for project List all hooks configured for the specified project
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListHooksForProjectAsyncWithHttpInfo (string orgid, string projectid)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->ListHooksForProject");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->ListHooksForProject");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListHooksForProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Ping an org hook Send a ping event to an org hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        public string PingHook (string orgid, string id)
        {
             ApiResponse<string> localVarResponse = PingHookWithHttpInfo(orgid, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ping an org hook Send a ping event to an org hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PingHookWithHttpInfo (string orgid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->PingHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PingHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Ping an org hook Send a ping event to an org hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PingHookAsync (string orgid, string id)
        {
             ApiResponse<string> localVarResponse = await PingHookAsyncWithHttpInfo(orgid, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ping an org hook Send a ping event to an org hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PingHookAsyncWithHttpInfo (string orgid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->PingHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PingHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Ping a project hook Send a ping event to a project hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>string</returns>
        public string PingHook_0 (string orgid, string projectid, string id)
        {
             ApiResponse<string> localVarResponse = PingHook_0WithHttpInfo(orgid, projectid, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ping a project hook Send a ping event to a project hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PingHook_0WithHttpInfo (string orgid, string projectid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->PingHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->PingHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PingHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Ping a project hook Send a ping event to a project hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PingHook_0Async (string orgid, string projectid, string id)
        {
             ApiResponse<string> localVarResponse = await PingHook_0AsyncWithHttpInfo(orgid, projectid, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ping a project hook Send a ping event to a project hook. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PingHook_0AsyncWithHttpInfo (string orgid, string projectid, string id)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->PingHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->PingHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PingHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update hook for organization Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateHook (string orgid, string id, Options3 options = null)
        {
             ApiResponse<Object> localVarResponse = UpdateHookWithHttpInfo(orgid, id, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update hook for organization Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateHookWithHttpInfo (string orgid, string id, Options3 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->UpdateHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->UpdateHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update hook for organization Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateHookAsync (string orgid, string id, Options3 options = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateHookAsyncWithHttpInfo(orgid, id, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update hook for organization Update a new hook. NOTE: you must be a manager in the organization to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHookAsyncWithHttpInfo (string orgid, string id, Options3 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->UpdateHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->UpdateHook");

            var localVarPath = "/orgs/{orgid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update hook for project Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateHook_0 (string orgid, string projectid, string id, Options5 options = null)
        {
             ApiResponse<Object> localVarResponse = UpdateHook_0WithHttpInfo(orgid, projectid, id, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update hook for project Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateHook_0WithHttpInfo (string orgid, string projectid, string id, Options5 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->UpdateHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->UpdateHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->UpdateHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update hook for project Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateHook_0Async (string orgid, string projectid, string id, Options5 options = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateHook_0AsyncWithHttpInfo(orgid, projectid, id, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update hook for project Update an existing hook. NOTE: you must be a manager of the project to update hooks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgid">Organization identifier</param>
        /// <param name="projectid">Project identifier</param>
        /// <param name="id">Hook record identifier</param>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHook_0AsyncWithHttpInfo (string orgid, string projectid, string id, Options5 options = null)
        {
            // verify the required parameter 'orgid' is set
            if (orgid == null)
                throw new ApiException(400, "Missing required parameter 'orgid' when calling WebhooksApi->UpdateHook_0");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling WebhooksApi->UpdateHook_0");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->UpdateHook_0");

            var localVarPath = "/orgs/{orgid}/projects/{projectid}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain",
                "text/html",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgid != null) localVarPathParams.Add("orgid", this.Configuration.ApiClient.ParameterToString(orgid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (apikey) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (permissions) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHook_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
